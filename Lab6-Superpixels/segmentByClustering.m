function segmentation = segmentByClustering(img, featureSpace, clusteringMethod, numberOfClusters)
% SEGMENTBYCLUSTERING  This function segments an image based on clustering.
% 'featureSpace' can be 'rgb', 'lab', 'hsv', 'rgb+xy', 'lab+xy' or
% 'hsv+xy'. 'clusteringMethod' can be 'k-means', 'gmm', 'hierarchical' or
% 'watershed'. 'numberOfClusters' is a positive integer greater than two.
% 'segmentation' is a two dimensional matrix of the same dimensions of the
% original image but only one channel; each entry of this matrix is the
% label of the cluster to which the pixel belongs.

%% Check number of clusters 
if numberOfClusters<2, error('Number of clusters must be more than 1'),end;
if strcmp(clusteringMethod,'watershed') % Watersheds
    img     = imgaussfilt(img,2);
    str     = strel('disk',1);
    grad    = imdilate(img,str) - imerode(img,str);
    grad    = mean(grad,3);
    clusters = Inf;
    h = 1;
    while clusters > numberOfClusters
        marker = imextendedmin(grad,h);
        new_grad = imimposemin(grad,marker);
        ws = watershed(new_grad);
        clusters = max(ws(:));
        h = h + 1;
    end
    segmentation = ws;
    
else % Not watersheds
    %% Change data type of image
    img = double(img);
    numberOfClusters = double(numberOfClusters);
    
    %% Extract size info
    sy = size(img,1);
    sx = size(img,2);

    %% Transform image to color space (not taking into account '+xy')
    color = featureSpace(1:3);
    if ~strcmp(color,'rgb')
        eval(['img = rgb2',color,'(img);']);
    end

    %% Add '+xy' if it exists
    if length(featureSpace) > 3
        [x,y]       = meshgrid(1:sy,1:sx);% Create x-y grid
        img(:,:,4)  = x';% Assign grid to other channels of the image
        img(:,:,5)  = y';
    end

    %% Prepare data for clustering
    img = squeeze(reshape(img,sx*sy,1,[]));
    % At this point, img's size must be (numberofpixels) x (numberofchannels),
    % where numberofchannels includes 'xy' if they were requested.

    %% Normalize channels
    img = zscore(img);

    %% Cluster according to parameter
    switch clusteringMethod
        case 'k-means'
            lbls = kmeans(img,numberOfClusters);  
        case 'gmm'
            gmModel = fitgmdist(img, numberOfClusters, 'CovarianceType','diagonal'); 
            % Additional options: 'CovarianceType' {'full','diagonal'}
            %                   : 'MaxIter' allowed num of iterations (default 100)
            %                   : 'TolFun' termination tolerance
            %                   : 'Start' {'plus','randSample'}
            lbls = cluster(gmModel,img);
            % gmModel can be optimized using AIC ( Akaike Information Criterion) to determine # of clusters
            % penalizes the model based on its complexity [1].
        case 'hierarchical'
            lbls = clusterdata(img,'linkage','ward','savememory','on','maxclust',numberOfClusters);
    end
    
    %% Return labels generated by clustering to original image size
    segmentation = reshape(lbls,sy,sx);
    
end
end
%[1] https://pdfs.semanticscholar.org/9063/d849a9cf4c9f7abf39d5416721ef90ff9e57.pdf